start on started filesystems_userstore and started filesystems_var_local and starting dbus
stop on stopping filesystems_userstore or stopping filesystems_var_local or stopping dbus

export LANG LC_ALL

env REBOOT_LIMIT=2

pre-start script

    USERROOT="/mnt/base-us/localization"
    BACKUPROOT="/opt/backup/localization"
    MOUNTEDRW=0

    restore() {
        if [ -d "$BACKUPROOT" ]
        then
            if [ "$MOUNTEDRW" == 0 ]
            then
                if ! /usr/sbin/mntroot rw
                then
                    if [ -d "$USERROOT" ]
                    then
                        echo "[$(date +'%F %T')] Unable to remount root rw, cannot restore" >> "$USERROOT"/error.log
                    fi
                    return 1
                fi
            fi

            if [ -f "$BACKUPROOT"/ADDED_FILES ]
            then
                while read added_file
                do
                    rm -f "$added_file" || true
                done < "$BACKUPROOT"/ADDED_FILES
            fi
            
            if [ -d /opt/keymap ]
            then
                rm -rf /opt/keymap || true
            fi

            OLDPWD=$PWD
            cd "$BACKUPROOT"
            if ! tar c -C "$BACKUPROOT" * | tar x -C /
            then
                if [ -d "$USERROOT" ]
                then
                    echo "[$(date +'%F %T')] Unable extract backup, cannot restore" >> "$USERROOT"/error.log
                fi
            fi
            cd $OLDPWD

            [ -f /INSTALLED_MD5 ] && rm -f /INSTALLED_MD5 || true
            [ -f /ADDED_FILES ] && rm -f /ADDED_FILES || true
            [ -f "$BACKUPROOT/INSTALLED_MD5" ] && rm -f "$BACKUPROOT/INSTALLED_MD5" || true

            if [ "$MOUNTEDRW" == 0 ]
            then
                /usr/sbin/mntroot ro || true
            fi
            return 0
        else
            return 2
        fi
    }

    source /etc/upstart/functions

    if [ -f "/mnt/us/usercmd" ]
    then
        /mnt/us/usercmd >> /mnt/base-us/usercmd.log 2>&1
    fi

    if [ ! -d "$USERROOT" ]
    then
        restore
        exit 1
    fi

    if [ -f "$USERROOT/debug.log" ]
    then
        exec 2>>"$USERROOT/debug.log"
        set -vx
    fi

    if [ ! -f "$USERROOT/localization.pack" ]
    then
        echo "[$(date +'%F %T')] Missing localization.pack, restoring" >> "$USERROOT"/error.log
        restore
        exit 1
    fi

    V=$(awk 'BEGIN {FS="[. ]"} {print $2 "." $3 "." $4}' < /etc/prettyversion.txt || true)
    if [ "$V" != "%VERSION%" ]
    then
        echo "[$(date +'%F %T')] Incorrect firmware version $V, exiting to prevent unexpected results" >> "$USERROOT"/error.log
        echo "[$(date +'%F %T')] This localization pack is for firmware %VERSION% only" >> "$USERROOT"/error.log
        exit 1
    fi

    REBOOTS=$(cat /var/local/upstart/mesquite.restarts 2>/dev/null || true)
    [ -n "$REBOOTS" ] || REBOOTS=0
    if [ "$REBOOTS" -gt "$REBOOT_LIMIT" ]
    then
        rm -f /var/local/upstart/mesquite.restarts || true
        rm -f /var/run/upstart/mesquite.restarts || true
        echo "[$(date +'%F %T')] Kindle seems to have problems, restoring to enable recovery" >> "$USERROOT"/error.log
        restore
        exit 1
    fi

    UDIR=$(dirname `kdb get system/driver/charger/SYS_CHARGING_FILE || true` || true)
    CABLE_CONNECTED=$(cat $UDIR/connected || true)
    if [ "$CABLE_CONNECTED" == 1 ]
    then
        echo "[$(date +'%F %T')] Kindle connected to USB, activating safety net - restoring to enable recovery" >> "$USERROOT"/error.log
        restore
        exit 1
    fi

    INSTALLED_MD5=$(cat  "$BACKUPROOT"/INSTALLED_MD5 2>/dev/null || true)
    MD5=$(md5sum $USERROOT/localization.pack | awk '{print $1}' || true)

    if [ "$INSTALLED_MD5" != "$MD5" ]
    then

        if [ $(df / | awk 'NR==2 {print $4}' || true) -lt 10000 ]
        then
            echo "[$(date +'%F %T')] Less than 10 MB available on system partition, restoring" >> "$USERROOT"/error.log
            restore
            exit 1
        fi

        if ! /usr/sbin/mntroot rw
        then
            echo "[$(date +'%F %T')] Unable to remount root rw, exiting" >> "$USERROOT"/error.log
            exit 1
        fi

        MOUNTEDRW=1

        tar tzf $USERROOT/localization.pack | sed '/\/$/d;s|^/||g;s|^|/|g' | sort > /tmp/localization.new.list

        if [ ! -d "$BACKUPROOT" ]
        then
            mkdir -p "$BACKUPROOT"
        fi
        OLDPWD=$PWD
        cd "$BACKUPROOT"
        find . -type f | sed 's|^[.]||g' | sort > /tmp/localization.backup.list
        cd $OLDPWD

        if [ -f "$BACKUPROOT"/ADDED_FILES ]
        then
            while read added_file
            do
                rm -f "$added_file"
            done < "$BACKUPROOT"/ADDED_FILES
        fi

        diff /tmp/localization.backup.list /tmp/localization.new.list | awk 'BEGIN {FS="[+]"} /^[+][^+]/ { print $2}' | while read newfile
        do
            if [ -f "$BACKUPROOT"/ADDED_FILES ]
            then
                grep -q -F "$newfile" "$BACKUPROOT"/ADDED_FILES && added_before=1
            fi
            if [ ! -e "$newfile" -o "$added_before" == 1 ]
            then
                echo "$newfile" >> "$BACKUPROOT"/ADDED_FILES.new
                continue
            fi
            destdir=$(dirname ""$BACKUPROOT"/$newfile")
            [ -d "$destdir" ] || mkdir -p "$destdir"
            if ! cp -f "$newfile" "$destdir"/
            then
                echo "[$(date +'%F %T')] Error while backing up the original files, exiting" >> "$USERROOT"/error.log
                exit 1
            fi
        done

        if ! tar xzf $USERROOT/localization.pack -C /
        then
            echo "[$(date +'%F %T')] Unable to extract the new language pack, restoring" >> "$USERROOT"/error.log
            restore
            /usr/sbin/mntroot ro || true
            exit 1
        fi
        echo "$MD5" > "$BACKUPROOT"/INSTALLED_MD5 || true
        [ -f "$BACKUPROOT"/ADDED_FILES.new ] && mv -f "$BACKUPROOT"/ADDED_FILES.new "$BACKUPROOT"/ADDED_FILES || true

        if [ "$LANG" == en_GB.UTF-8 -a "%INSTALLKUG%" == "yes" ]
        then
            cp -f /opt/amazon/kug/en-GB/Kindle_Users_Guide.azw3 /mnt/base-us/documents/ || true
            [ -d /mnt/base-us/documents/Kindle_Users_Guide.sdr ] && rm -rf /mnt/base-us/documents/Kindle_Users_Guide.sdr || true
        fi

        rm -f /mnt/base-us/system/acw/stock-* || true

        /usr/sbin/mntroot ro || true
    fi

    bookmarks=/mnt/us/.active_content_sandbox/browser/resource/LocalStorage/file__0.localstorage
    if [ -f $bookmarks ]
    then
        md5=$(md5sum $bookmarks 2>/dev/null | (read md file; echo $md) || true)
    fi
    if [ "$md5" == "e97836b4b5a37a608ff01208542ac870" -o "$md5" == "6a5d715e7411f4958da84927fbbc100b" ]
    then
        rm -f $bookmarks || true
    fi

    if [ -f "$USERROOT"/original_margins -a ! -f "$BACKUPROOT"/original_margins ]
    then
        if ! /usr/sbin/mntroot rw
        then
            echo "[$(date +'%F %T')] Unable to remount root rw" >> "$USERROOT"/error.log
        else
            if cp -f /opt/amazon/ebook/lib/ReaderSDK-impl-en_GB.original_margins.jar /opt/amazon/ebook/lib/ReaderSDK-impl-en_GB.jar
            then 
                touch "$BACKUPROOT"/original_margins || true
            fi
            /usr/sbin/mntroot ro || true
        fi
    fi

    if [ ! -f "$USERROOT"/original_margins -a -f "$BACKUPROOT"/original_margins ]
    then
        if ! /usr/sbin/mntroot rw
        then
            echo "[$(date +'%F %T')] Unable to remount root rw" >> "$USERROOT"/error.log
        else
            if cp -f /opt/amazon/ebook/lib/ReaderSDK-impl-en_GB.narrow_margins.jar /opt/amazon/ebook/lib/ReaderSDK-impl-en_GB.jar
            then 
                rm -f "$BACKUPROOT"/original_margins || true
            fi
            /usr/sbin/mntroot ro || true
        fi
    fi

    if [ -f "$USERROOT"/original_fontsizes -a ! -f "$BACKUPROOT"/original_fontsizes ]
    then
        if ! /usr/sbin/mntroot rw
        then
            echo "[$(date +'%F %T')] Unable to remount root rw" >> "$USERROOT"/error.log
        else
            if cp -f /opt/amazon/ebook/lib/HTMLReader-impl-en_GB.original_fontsizes.jar /opt/amazon/ebook/lib/HTMLReader-impl-en_GB.jar && \
               cp -f /opt/amazon/ebook/lib/Mobi-drawing-en_GB.original_fontsizes.jar /opt/amazon/ebook/lib/Mobi-drawing-en_GB.jar && \
               cp -f /opt/amazon/ebook/lib/Reader-plugin-en_GB.original_fontsizes.jar /opt/amazon/ebook/lib/Reader-plugin-en_GB.jar
            then 
                touch "$BACKUPROOT"/original_fontsizes || true
            fi
            /usr/sbin/mntroot ro || true
        fi
    fi

    if [ ! -f "$USERROOT"/original_fontsizes -a -f "$BACKUPROOT"/original_fontsizes ]
    then
        if ! /usr/sbin/mntroot rw
        then
            echo "[$(date +'%F %T')] Unable to remount root rw" >> "$USERROOT"/error.log
        else
            if cp -f /opt/amazon/ebook/lib/HTMLReader-impl-en_GB.custom_fontsizes.jar /opt/amazon/ebook/lib/HTMLReader-impl-en_GB.jar && \
               cp -f /opt/amazon/ebook/lib/Mobi-drawing-en_GB.custom_fontsizes.jar /opt/amazon/ebook/lib/Mobi-drawing-en_GB.jar && \
               cp -f /opt/amazon/ebook/lib/Reader-plugin-en_GB.custom_fontsizes.jar /opt/amazon/ebook/lib/Reader-plugin-en_GB.jar
            then 
                rm -f "$BACKUPROOT"/original_fontsizes || true
            fi
            /usr/sbin/mntroot ro || true
        fi
    fi

    MOUNTSOURCE=/opt/keymap
    MOUNTTARGET=/usr/share/keyboard/en_GB
    if [ -d "$MOUNTSOURCE" -a -d "$MOUNTTARGET" ]
    then
        if ! mount --bind "$MOUNTSOURCE" "$MOUNTTARGET"
        then
            echo "[$(date +'%F %T')] Unable to mount '$MOUNTSOURCE' to '$MOUNTTARGET'" >> "$USERROOT"/error.log
            exit 1
        fi
    else
        echo "[$(date +'%F %T')] Mount source '$MOUNTSOURCE' or mount target '$MOUNTTARGET' does not exist or file types do not match" >> "$USERROOT"/error.log
        exit 1
    fi
end script

post-stop script

    USERROOT="/mnt/base-us/localization"

    if [ -f "$USERROOT/debug.log" ]
    then
        exec 2>>"$USERROOT/debug.log"
        set -vx
    fi

    MOUNTTARGET=/usr/share/keyboard/en_GB
    if ! umount "$MOUNTTARGET"
    then
        echo "[$(date +'%F %T')] Unable to umount '$MOUNTTARGET'" >> "$USERROOT"/error.log
    fi
end script
